            // origin["WeapRight"] = self GetTagOrigin("j_wrist_ri");
            // self.eCherryfxOrigin["WeapRight"] = util::spawn_model("tag_origin", origin["WeapRight"]);
            // self.eCherryfxOrigin["WeapRight"] LinkTo(self, "j_wrist_ri");
            // self.eCherryfx["WeapRight"] = PlayFXOnTag(level._effect["tesla_bolt"], self.eCherryfxOrigin["WeapRight"], "tag_origin");
            
            // origin["Ankle_le"] = self GetTagOrigin("j_ankle_le");
            // self.eCherryfxOrigin["Ankle_le"] = util::spawn_model("tag_origin", origin["Ankle_le"]);
            // self.eCherryfxOrigin["Ankle_le"] LinkTo(self, "j_ankle_le");
            // self.eCherryfx["Ankle_le"] = PlayFXOnTag(level._effect["tesla_shock"], self.eCherryfxOrigin["Ankle_le"], "tag_origin");

            // origin["Ankle_ri"] = self GetTagOrigin("j_ankle_ri");
            // self.eCherryfxOrigin["Ankle_ri"] = util::spawn_model("tag_origin", origin["Ankle_ri"]);
            // self.eCherryfxOrigin["Ankle_ri"] LinkTo(self, "j_ankle_ri");
            // self.eCherryfx["Ankle_ri"] = PlayFXOnTag(level._effect["tesla_shock"], self.eCherryfxOrigin["Ankle_ri"], "tag_origin");

            // origin["Spine_low"] = self GetTagOrigin("j_spinelower");
            // self.eCherryfxOrigin["Spine_low"] = util::spawn_model("tag_origin", origin["Spine_low"]);
            // self.eCherryfxOrigin["Spine_low"] LinkTo(self, "j_spinelower");
            // self.eCherryfx["Spine_low"] = PlayFXOnTag(level._effect["tesla_shock"], self.eCherryfxOrigin["Spine_low"], "tag_origin");

//  "acog_11", "playlist_prop_hunt"

// DONE Bools ON - OFF with scale animation (small to big when state changes or left to right move)
// DONE Do bools color change
// DONE Do presets and offsets to prepare the menu for pos move function

// TODO Welcome messahe xbox live style (fade, scale and scale back and go down)
// TODO Menu instructions in the middle popping from below
//  TODO review shaders to set for header change
//  TODO Dvar remembrance of menu settings

//  Cursor Opt Anim
// CursorOptAnim()
// {
//     if(self.menu[HUD]["Options"][a].x != self.menu["X"] - 205)
//         self.menu[HUD]["Options"][a] thread hudMoveX(self.menu["X"] - 205, self.menu["ScrollDelay"]);
//     if(self.menu[HUD]["Options"][a].fontscale != self.menu["OptFontSize"])
//         self.menu[HUD]["Options"][a] thread hudFontScaleOverTime(self.menu["OptFontSize"], self.menu["ScrollDelay"]);

//     self.menu[HUD]["Options"][self getCursor()] thread hudMoveX(self.menu["X"] - 190, self.menu["ScrollDelay"]);
//     self.menu[HUD]["Options"][self getCursor()] thread hudFontScaleOverTime(self.menu["OptFontSize"] + 0.2, self.menu["ScrollDelay"]);
// }

// if(self sprintbuttonpressed()) self iprintln("SPRINT");
// if(self inventorybuttonpressed()) self iprintln("INVENTORY");
// if(self secondaryoffhandbuttonpressed()) self iprintln("[{+smoke}]");
// if(self fragbuttonpressed()) self iprintln("[{+frag}]");
// if(self stancebuttonpressed()) self iprintln("[{+stance}]");
// if(self jumpbuttonpressed()) self iprintln("[{+gostand}]");
// if(self meleebuttonpressed()) self iprintln("[{+melee}]");
// if(self adsbuttonpressed()) self iprintln("[{+speed_throw}]");
// if(self actionslotfourbuttonpressed()) self iprintln("[{+actionslot 4}]");
// if(self actionslotthreebuttonpressed()) self iprintln("[{+actionslot 3}]");
// if(self actionslottwobuttonpressed()) self iprintln("[{+actionslot 2}]");
// if(self actionslotonebuttonpressed()) self iprintln("[{+actionslot 1}]");
// if(self attackbuttonpressed()) self iprintln("[{+attack}]");
// if(self changeseatbuttonpressed()) self iprintln("[{+switchseat}]");
// if(self usebuttonpressed()) self iprintln("[{+usereload}]");

// BINDS generated by Call of Duty, do not modify
// unbindall
// bind BUTTON_A "+gostand"
// bind BUTTON_B "+stance"
// bind BUTTON_X "+usereload"
// bind BUTTON_Y "+weapnext_inventory"
// bind2 BUTTON_Y "+switchseat"
// bind BUTTON_LSHLDR "+smoke"
// bind BUTTON_RSHLDR "+frag"
// bind TAB "+scores"
// bind BUTTON_START "togglemenu"
// bind BUTTON_BACK "togglescores"
// bind BUTTON_LSTICK "+breath_sprint"
// bind BUTTON_RSTICK "+melee"
// bind BUTTON_LTRIG "+speed_throw"
// bind BUTTON_RTRIG "+attack"
// bind DPAD_UP "+actionslot 1"
// bind DPAD_DOWN "+actionslot 2"
// bind DPAD_LEFT "+actionslot 3"
// bind DPAD_RIGHT "+actionslot 4"
// bind ESCAPE "togglemenu"
// bind SPACE "+gostand"
// bind 1 "+actionslot 1"
// bind 2 "+actionslot 2"
// bind 3 "+actionslot 4"
// bind 4 "+actionslot 3"
// bind A "+moveleft"
// bind B "+talk"
// bind C "+stance"
// bind D "+moveright"
// bind E "+smoke"
// bind F "+activate"
// bind G "+frag"
// bind P "chatmodeparty"
// bind Q "+weaphero"
// bind R "+reload"
// bind S "+back"
// bind T "chatmodepublic"
// bind V "+melee"
// bind W "+forward"
// bind X "+weapnext_inventory"
// bind Y "chatmodeteam"
// bind PAUSE "pause"
// bind CTRL "toggleprone"
// bind SHIFT "+breath_sprint"
// bind F9 "acceptLastGameInvite"
// bind F10 "screenshotJpeg"
// bind MOUSE1 "+attack"
// bind MOUSE2 "+speed_throw"
// bind MOUSE3 "+frag"
// bind MWHEELDOWN "weapprev"
// bind MWHEELUP "weapnext"
// unbindallaxis
// bindaxis A_LSTICK_X VA_SIDE MAP_SQUARED
// bindaxis A_LSTICK_Y VA_FORWARD MAP_SQUARED
// bindaxis A_RSTICK_X VA_YAW MAP_LINEAR
// bindaxis A_RSTICK_Y VA_PITCH MAP_LINEAR
